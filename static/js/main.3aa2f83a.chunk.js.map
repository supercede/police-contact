{"version":3,"sources":["phone/phone.js","state/state.js","stateList/stateList.js","search/search.js","App.js","serviceWorker.js","index.js"],"names":["Phone","phones","className","map","phone","i","key","href","substring","State","prop","state","StateList","states","charAt","toUpperCase","Search","handleChange","type","placeholder","onChange","App","e","setState","query","target","value","this","findStates","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ihFAkBeA,G,MAfD,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACf,OACE,yBAAKC,UAAU,mBACZD,EAAOE,KAAI,SAACC,EAAOC,GAAR,OACV,yBAAKC,IAAKD,GACR,uBAAGE,KAAI,kBAAaH,EAAMI,UAAU,IAAMN,UAAU,SAClD,uBAAGA,UAAU,4BACZE,UCEEK,EATD,SAAAC,GACZ,OACE,6BACE,4BAAKA,EAAKC,OACV,kBAAC,EAAD,CAAOV,OAAQS,EAAKT,WCYXW,G,MAfG,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OACE,yBAAKX,UAAU,mBACZW,EAAOV,KAAI,WAAoBE,GAApB,IAAGM,EAAH,EAAGA,MAAOV,EAAV,EAAUA,OAAV,OACV,yBAAKC,UAAU,QAAQI,IAAKD,GAC1B,kBAAC,EAAD,CACEM,MAAOA,EAAMG,OAAO,GAAGC,cAAgBJ,EAAMH,UAAU,GACvDP,OAAQA,WCQLe,G,MAhBA,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAChB,OACE,yBAAKf,UAAU,UACb,2BACEA,UAAU,eACVgB,KAAK,SACLC,YAAY,gBACZC,SAAUH,IAEZ,4BAAQC,KAAK,SAAShB,UAAU,iBAC9B,uBAAGA,UAAU,qB,OC4BNmB,G,kBAlCb,aAAe,IAAD,8BACZ,+CAOFJ,aAAe,SAAAK,GAAC,OAAI,EAAKC,SAAS,CAAEC,MAAOF,EAAEG,OAAOC,SALlD,EAAKf,MAAQ,CACXa,MAAO,IAJG,E,sEAUJ,IACAA,EAAUG,KAAKhB,MAAfa,MACFI,EAAaf,IAAOgB,QAAO,SAAAlB,GAAK,OACpCA,EAAMA,MAAMmB,cAAcC,SAASP,EAAMM,kBAG3C,OACE,yBAAK5B,UAAU,aACb,yBAAKA,UAAU,UACb,sDACA,qDACA,kBAAC,EAAD,CAAQe,aAAcU,KAAKV,gBAE5BW,EAAWI,OAAS,EACnB,kBAAC,EAAD,CAAWnB,OAAQe,IAEnB,uBAAG1B,UAAU,YAAb,qD,GA3BQ+B,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3aa2f83a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./phone.css\";\r\n\r\nconst Phone = ({ phones }) => {\r\n  return (\r\n    <div className=\"phone-container\">\r\n      {phones.map((phone, i) => (\r\n        <div key={i}>\r\n          <a href={`tel:+234${phone.substring(1)}`} className=\"phone\">\r\n            <i className=\"fas fa-phone-square-alt\"></i>\r\n            {phone}\r\n          </a>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Phone;\r\n","import React from \"react\";\r\nimport Phone from \"../phone/phone\";\r\n\r\nconst State = prop => {\r\n  return (\r\n    <div>\r\n      <h2>{prop.state}</h2>\r\n      <Phone phones={prop.phones} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default State;\r\n","import React from \"react\";\r\nimport State from \"../state/state\";\r\nimport \"./stateList.css\";\r\n\r\nconst StateList = ({ states }) => {\r\n  return (\r\n    <div className=\"state-container\">\r\n      {states.map(({ state, phones }, i) => (\r\n        <div className=\"state\" key={i}>\r\n          <State\r\n            state={state.charAt(0).toUpperCase() + state.substring(1)}\r\n            phones={phones}\r\n          />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StateList;\r\n","import React from \"react\";\r\nimport \"./search.css\";\r\n\r\nconst Search = ({ handleChange }) => {\r\n  return (\r\n    <div className=\"search\">\r\n      <input\r\n        className=\"search-input\"\r\n        type=\"search\"\r\n        placeholder=\"search states\"\r\n        onChange={handleChange}\r\n      />\r\n      <button type=\"submit\" className=\"search-button\">\r\n        <i className=\"fa fa-search\"></i>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { Component } from \"react\";\nimport StateList from \"./stateList/stateList\";\nimport Search from \"./search/search\";\nimport { states } from \"./assets/data.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      query: \"\"\n    };\n  }\n\n  handleChange = e => this.setState({ query: e.target.value });\n\n  render() {\n    const { query } = this.state;\n    const findStates = states.filter(state =>\n      state.state.toLowerCase().includes(query.toLowerCase())\n    );\n\n    return (\n      <div className=\"container\">\n        <div className=\"header\">\n          <h2>In Trouble? Need Help?</h2>\n          <h3>Call the Police Today</h3>\n          <Search handleChange={this.handleChange} />\n        </div>\n        {findStates.length > 0 ? (\n          <StateList states={findStates} />\n        ) : (\n          <p className=\"no-match\">No matches found, please review search query</p>\n        )}\n        {/* <State /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}